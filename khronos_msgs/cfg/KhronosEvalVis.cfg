#!/usr/bin/env python
"""Configuration options for the khronos evaluation visualizer lugin."""
PACKAGE = "khronos_msgs"

import dynamic_reconfigure.parameter_generator_catkin as dr_gen  # NOQA
from dynamic_reconfigure.parameter_generator_catkin import *

gen = dr_gen.ParameterGenerator()

object_color_enum = gen.enum([gen.const("Label", int_t, 0, "Color all objects according to their semantic label."),
                       gen.const("Presence", int_t, 1, "Color all objects based on their change state (color=present, gray=absent)."),
                       gen.const("ChangeState", int_t, 2, "Color all objects by change state (red=disappeared, green=appeard, blue=present).")
                  ],
                     "Set the color of objects for the visualizer.")

gen.add("object_color", int_t, 0, "How to color the objects in the DSG.", 0, 0, 2, edit_method=object_color_enum)


gen.add("robot_time", int_t, 0, "Index of the robot time to visualize.", 0, 0, 1000)
gen.add("query_time",   int_t,   0, "Index of the query time to visualize.", 0, 0, 1000)
gen.add("z_offset",     double_t, 0.0, "Offset the ground truth by z meters.", 5.0, 0, 100)
gen.add("bbox_scale",   double_t, 0.0, "Width of the bounding box markers in meters.", 0.03, 0, 1)
gen.add("centroid_scale",  double_t, 0.0, "Radius of the centroid markers in meters.", 0.3, 0, 1)
gen.add("id_scale",  double_t, 0.0, "Height of the name text markers in meters.", 0.3, 0, 1)
gen.add("association_scale",  double_t, 0.0, "Width of the association lines in meters.", 0.05, 0, 1)

exit(gen.generate(PACKAGE, PACKAGE, "KhronosEvalVis"))
